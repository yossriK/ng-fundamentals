use angular cli to create a new angular project, complete with configs to get your app ready for production. can get cli using npm install -g @angular/cli

use : ng new 'template name' to create a new an template for our angular project

angular.json : have some configs for our web packing....
and package json(tells you what dependencies you got) ~ this sign would mean the approximate version ( means would include other batch)
in src: app folder: most of our coding in
	assets folder: statics stuff like our images ...
{ there was some stuff to lock json files and the packages but I could care less at this point}

--- Angular 1 vs angular 2
angular 1 is now referred to as angular js
angulra 2 is simply angular

angular js is MVC architecture/framework where you have view/template that relates to controllers that exposes other mdoesl that represent data
angulra you have component that is one to one with template; you still got mdoels to represent data. component in angular can be thought of as directive in angyular
that get html and logic all together  1 but it was more cohesive and felt cluncky


angular app is bootstrapped
    hierarchical component tree have at its top app component, ==> this got the tempalte, styling and ts file.
    bootstrapping starts with the main.ts file that is linked at angular.json file (check main property), main.ts loaded when app starts, in there I link to appcomponent.ts, and
    in the modules I bootstrap app component as well, double check those sir. but how do I display component??

    look in app.component.ts, it got the selector that is refered in index.html. indexhtml loads first then this gets appcomponent



==-- App module: 
    when adding component, pipe or directive you should add them in declration sectiuon 
    services are added as provider,
    in imports you add other external providers and they become available thru the app I guess 



===-- how to use static assets in our files
    go add images in the assets folder
    linking here works as I am referncing the assets/images folder in our angular.json file that will be included in our app bundle(tells our webpack to do so )
    these were in the "assets" array that you can put images or icons, for scripts lets say there is "scripts" you can put your stuff there 
    I got some new packages installed, then I just refer them into our angular json file 

---=== 
getting scss styling from external package, what we did was usng a twitter package or so, npm isntall ngf-bootstrap --save 
    this package got ng-bootstrap, and jquery(not needed for anguylar dev but got it here) jquery got some help for our menus



----=== Binging and addings strings to html
{{object}} ==> this is interpolation htat represents oen way binding. Angular will look for that object in the component
we use thsi /$ to escape the dollar sign in a html if it is string literal: like html in the compoent itself usign ``
[input parameter in the reciever componet]=(member in our component, the sender)

=== Three ways for intercomponent communication
    ---== pass data from parent component to child component
    we importt Input from angular, and put @Input infront of the varible that we expect to be sent from a component to another 
    <event-thumbnail [event]="event1"></event-thumbnail>
    [input parameter in the reciever componet]=(member in our component, the sender)

    ---== pass data from child component to parent8 component

    @output when I want to send something from child component to the parent component 
    so in child component can have something like this 
    @output evnetClick = new EventEmitter(); 

    when button clicked funcntion()
    {
        this.evnetClick.emit(anydata);
    } ..> this all done in the child 

    now in the paernt i recieve the event liek this; in html for example
    (evnetClick(match same output property of child)) = "newCustomFunctionMadeinParentToHandleTheEmited($event(this refers to data emitted from event, single object))"


    ---=== acccessing public property of child compoents: Template refernce variable using # syntax
        allow to specify varibale name that points to a component and we access sstuff using that variable
        <event-thumbnail [event]="event1"></event-thumbnail> ==> thsi was how wer reference the child in parent html 
        so to add variable we do this in the html #thumbnail(radniom name) to look like this ==> <event-thumbnail #thumbnail [event]="event1"></event-thumbnail>
        
        now from parent html I can do thumbnail.functionNameInChild , and that should call it for me, 
        or jsut access any other property like this thumbnail.propertyName



==--=-= Applying css styles on componetn
angular has some good built in functionality to add styling
view encapsulation : applies changes to specific selectors wuithin your scope so your css doesnt bleed into other components.

you can use global styling in the style.css folder and apply that to all of your other files, but to be more specific in your css changes, angular would take care of that for you.
you can use SMACC for more crafting of what applys to what 


---=== Adding site header 
we will want to add app-router known as router outlet component, and then each top level component page will be displayed over, 
so we added navigation compoent on top of that the events-appcomponet


            ===---=== Exploring the angular Template Syntax ===---===
Interpolation {{objectname(namely an expression)}} and property binding [property] ="expression" ;
both are used to bind data form component to template, interpolation to display data, while binduign when I want to bind it to teh dom element

in these expressions cant do assigbnemnt( =, +=, ++ etc), new kewowrd, cant chain expressions together, cant access anythign from global namespace

expressions recommendations is to have no side-effects, be fast, be simple, idempotent(return same result always) 

-- evetng binding and statements
(click)_="doSomethign()", binding the click event to statement that is the function

same restrictions as expressions, for assignemnts = is allowed, others still hold, and allowed to chain using '
they are not required to be idempotent and ouwould have side effect and not fast always
they should be siomple

== Repeating data with NgFor
 *ngFor="let event of events" [event]="event"
 the '*' indicates that ngFor is a structural directive : change the cshape of the DOM as they add or remove elements from dom , 
 we passed to ngFor directive:  we created a local variable; 'events' was an array in the component. where that directive(ngfor) was put that element and all elements inside of it 
 will be repeated
 notice the styluing he added for column and row, was great great

== handle null values : Safe navigation operator
what if I sent values to the thumbnail that was null, or sent nothign at all but the component was expectign something lets say, in angular the app would actually break even 
tho the page displays no error( gotta inspect to see errors)
 to solve this, where ever a value is being passed to me, string interpolation lets say we gotta add a question mark to the end of the thingy/variable/expression
 might have to add this to inner properties as well like event.location.adada. this might work with just ? for event?.lcoa.sda  but what if lcoation wasnt there then we need to add
 for location property as well

 == hiding and shwoign content with ngif
 *ngif="event?.location" add somethign like this in the div, it doesnt just hide but it wont render at all at dom and wont do anywork
you wont see this element in the inpsect tools

 == hiding content with [Hidden] binding: 
 done in the case just hide then reshow, if it is done more frequent go with this method as if you go with the one above to not render it might be costly to then render again,
 so we just hide it, better from performance points
we can use [Hidden] property in the div to just hide it, it is still rendered, this is html thing but the angular binding makes it great
you will see the element in inspect tool having the hidden attribute

== hiding values with ngswitch: maybe like multiple options to hide or show
[ngSwithc]="value/expression" bounds what value we are watching
*ngSwitchCase= "'8:00 am'" string match for that value to get it runnign or not
*ngSwitchDefault this wouodl be the default value to fall into
css trick : you can keep the span in the div and will show beside it 

== styling components with ngClass  
class binding, if theis expression then add a certain class to this div [class.green]="some expression that woudl value to true ro false, can have somethigin = soemthieng and this logic is acceptatble"
but what if I want more thatn one class to bhe shown, then I need to do some else stuff, where ngClass comes in 
ngClass expects an object, mroe of a key-vlaue pair, the key is the css class I want to apply and the pair is if it true or false to apply 
or can return string, or array of classes I want to put there
the object is {green: expression to value to tryue or false, another class: another expression }
thsi also applied to that div of the element 

== styling components with ngStyle 
[style.color]="expresion evaluation ? style1 : style2" but what if want 2 styles
ngStyle same inline format as ngClass


            ====---==== Creating reusable services  ===---===

== Why are services necessary, 
want pieces of application to be reusable 
thub=mbnail responsible for how event looks like on stylking
but comopnenet need not to do business logic and get items/events ... thats too much responsibility for the component
that need to be done by other service, and there dependency injection 
service to serve us the data we looking to display


--==-- creating first service
this is nice to have for our services that we inject a service in the constructor of a comopnent. this is needed when we have an injection in teh service and the service is being referred in anither place
then all injected in it will be availlable for other components

import { Injectable } from '@angular/core';
@Injectable 

not goood to have the call to service in a constructor and it might be delayed , but we need that item in component once it start
so angular have life cycle hooks that we can hook onto once the compoent loads they get called:: ngOnInit()

==---===  usign third party libraries, injecting them in our code, basically wrapping them
we will use toaster for example for some pop up messages, these had some styles and js that we need to import in our styles and scripts in angular.json,
however the components might not know about it/ complain even it is in our app scope and thus we need to declare it in that component by declare let 'new servicename'
created a service to wrap that roastr


==>> wathc out when getting 3rd party services, they might need to be installed after a certain jquery library


                            ===---=== Routing and navigating pages ===---===
before advant of single page app all pages weree distinct and served separately and another call to be done for server for each page, and all the page would be replaced
now it loads single page from server namely index.html and rest are done using js and partially also not the whole page would be reloaded
Angular made this very simple for us

===--Adding multiple pages to your app
we just added another extra page for the details, id of the item passed in route and when the detial component is loaded we will get that id and fetch it from server
we have index.html bootstrapping someother element that got some child and that woudl be main page; moving on we want to use router-outlet: thatll display a route based on
their respected url 
import { Routes } from '@angular/router'; and add tyope Routes for array of routes object for more safety in routes.ts import this in appmodule by RouterModule.forRoot(appRoutes)
also in index.html we indicate that we are hosting this at teh base level of our app isign base href="/"
so add outlet in appComponent, define your routes, add routes to imports, add base href 


--==-- puling query param from the route: have to pass first, recheck your routes; usign activatedRoute service
+this.activatedRoute.snapshot.params['id']: how we got the id parameter 

==--== Linking to routes 
[routerLink]="['/evetns', event.id] turns the div to a link, wehn you click on it it will take you to that page
can also add this to <a> in navbar

==--== Naviagting from code
 { path: 'events/:id', component: EventDetailsComponent },
 { path: 'events/new', component: CreateEventComponent} --> put this on top of the lsit I guess for now( or change the whole name lol)
 angular cant differeniate between those 2 dummy paths so make sure to have a path between them

to call from code on click of button inject the import { Router } from '@angular/router'; into that component and bind that click onto a method, in the method you can then
        this.router.navigate(['/events']);


==--=== Gaurding against route activation 
intellisence have tehe canActivate and deDeActivate; route gaurd to take me to 404 if id is invalid lets say 
create 404 error componennt, add to app modules, then add routing to it

have a new activator service that mplenments canActivate. has a method that takes activated route snapchot,
on the routes.ts check which route i Want validation/gaurd for and then jsut add canActivate over there with what service it should speak to
we used a service for this functionality 

==--== Gaurding agains route De-activatiion
to prevent from getting user to leave a page before saving their data, lets say leaving before saving their new event
dont need a whoel service, can jsut define a function in the routes and register it in providers in app modules: (using short hand syntax)


==---== Preloading data for components using resolver handler
prefetch necessary for component and do prechecks before loading the comoponent especially in real world 
tried to make them async in our example here
what was happeingin is you can get compoenent to partially load and that is because we have header/title then data, so we dont want anything to display before getting my data

adding a resolver service, takes resolve as import and we map the data in there before sending them back to our component, and add the resolvier in appmodule and the respected route
    { path: 'events', component: EventsListComponent, resolve: {events: EventListResolver} },
notice I am passing an object to resolve, it goes to that resolver and get from there events 

==> all other routin to that page was affectes so look into that

==--== styling active links 
 routerLinkActive="active" add this to that div/a/li element and when that link is active it will apply that css syling class to it ,
  this will apply to all routes carrying first prefix so change it to full match
 [routerLinkActiveOptions]="{exact:true}"
  li> a.active { color: #F97924;} .. added > so doen get overridden by bootstrap



===---=== Lazily loading Feature modules 
adding more modules to my app instead of only app.modules
as we might have a portion of the site that is different from other stuff like user and events are didff, so want a diff module
we use commonmodule in the imports of the childmodule now, and use RouterModule.forchild(customroutes) (it was .forRoute in the main moudle)

add this in our routes.ts, you refer to the folder where is in in and the name of our other moduel
    { path: 'user', loadChildren: './user/user.module#UserModule'}


--==-- organizing your exports with barrels
can clean code as well with module breaking
creating barrels for our many imports called index.ts ( this can hvae index.ts from other diretories)
go check the index ts file we got
then we go to modules and jsut import what needed from those idnex file, makes our code cleaner a bit



                ---=== Collecting data with angular forms and validation===---
usind data models for type safety, then type based forms and model driven forms, twa way data binding, custom validators

--== using models for type safety: instead of always using jsut 'any'. can have an interface or a model, 
using ? with properties can mean they can be safely null
after creating a specific model go replace the 'any' types with it 

--== Creating your first template based form  ==> this is hte login component, we impoirt FormsModule to use it
we have tempalte based and model based(reactive forms)
tempalte based : can be done all in html, best for simple. restrains the logic and hard to do tests on tho
model based allows you to put logic in component instead of template 

created a simple sign in templpate, and dont forget to hook it to your routes and model. you need form model to hook your inputs to the component
we have (ngModel) that allows us to bind input fields (ngModel)="userName". () bind from html to the component, [] bind from component to html. [()]: banana in the box syntax, two way binding
[(ngModel)]: we might do this if want to edit the display data as well.
so have (ngModel)="userName" and name ="userName" in your html
i dont need a 'userName' in my component, they would just bind to the form, would just have to specify the form in our html like : #loginForm="ngForm', and (ngSubmit)="login(loginForm.value)"
we jsut looking to get the value from the form atm, but ive seen in practice dont need to pass the form back  through ngsubmit we can jsut have enough by binding the form in our comoponent
we didnt declare the bindings from the template in our comopoenet and then running in production mode gave some issues hmmm

--== using data from template based form 
we also tried to log user in, just used hardcoded stuff for the time beign
we also have isAuthenticated method to check if the user is actually signed in or not
dont forget to register the services in your provider; it is enough to just save them in the appModule, and can be used anyelse where in the app. for imports no, you have to add them to other modules as well

--== validating template based forms
so like to actually have inputs before populating input fields
'required' is an html5 attribute that can be used, but we want to use angular validation before htting a service for example so apply 'novalidate' on top of the form
there are many form validators that can be used, like form.valid :: example [disabled]="loginFrom.invalid"
<em *ngIf="loginForm.controls.password?.invalid">Required</em> this is an error message to be displayed if the inputs were not filled so to speak: dotn forget to use the safe navigator: '?' because some fields arent always available,
and you dont want errors
also a cool thing to do is when you hover over the disbaled login button you can display a small message that why the form is invalid. the disabled buttons dont fire events so this has to be done in a span
    <span (mouseenter)="mouseoverLogin=true" (mouseleave)="mouseoverlogin=false">,  mouseoverlogin is a boolean in the compoent
    in addition validators be applied directly in the html element: like add required and pattern="yada yada ya " to the div


--=== reactive forms
 so far we had template driven forms building logic in html 
  reactive is to have all in component and then wire validation to the html lets say. this way we can unit test this, 
  lets make a module driven form 
  ==> this is the profile component
  we created formcontrols for the inputfields/values we have in the html. these controls to be added to a form so we use a form group for that
  in the html : [formGroup]="profileForm"  is how we bind our form element into profileform that is in our componetnt
  then to bind the inputs to actual property in your profileform that they should be bound to using formControlName="lastName'
  for this model-based forms you have to import reactiveFormsMdoule
  for this example we wanted prepopulated information ok
  this.profileForm = new FormGroup({
      firstName: this.firstName,
      lastName: this.lastName
    }) where first and lastName where formcontorls: this function was on ngonit and will prepopulate these forms for us

    --== validating reactiveforms refer to the profile.component to see how the validation was done. pretty neat actually. too lazy to put all ntoes here
    this can be in component rather in html, adn Validators.required); can be just added in your formcontrols
    we can use ngClass binding to set what I class I want to show based on whatever error or so lol
    had our firstname and lastname as form controls and got extra validation we can apply on. we get the actual input values from the input form

    -== using multiple validators:;
    we can pass array of validators to the form::     this.firstName = new FormControl(this.authService.currentUser.firstName, [Validators.required, Validators.pattern('[a-zA-Z ]*')]);
    and in the html you display the error like thsis:      with the ngif checking the validity to display error or not     <em *ngIf="!validateFirstName() && profileForm.controls.firstName.error.required">Required</em>

-=-== Diving deeper into tempaltebased forms
lets do a creaet event form
remember how i needed to declare some the the variables in the form in the componet, but there was a loit of tehem, so he declared them on an object like: he access the variabels from 
newEvent.variable name, so from a new Event object you know what i mean, then he would just need to add that one object to the component::smart
again dont forget your FormsModule from angluar to be added to hte right module.ts
the form inputs we had were not mapping directly to our Event model, like location subnet, but angular allows us to do that mapping using ngModelGroup:="nameofparent", and whenm
you submit that form it will all by itself create that object for you. I might not even needed the variables to be even created in the componetnt 
wehn saving the model we already have same shape coming in from the form so we pass it as is
also remember your dirty flag, so once we saved to be false



-==-= editing data with 2 way binding
(ngModel)="event.date" name="date": name is used to populate the form value and (ngModel) is used to bind to objects on the component
so use the [()]: banana in the box syntax

--== diving deaper to reactive forms
we had some createSession page thatll use reactibve forms
had some drop downs in there as well.
the form we created in component was public so we can access that in our html template. other memebers can be private then in htnml you access them thru the form, if you keep them private no problem
compare profilecomponent with this component to see some of the differences
wire the input to each of theur control in the component by: formControlName="nameofthat control in your component"
-check how we did sanity check on that form htat we expected to be same as our sessionModel
-formvalues passed are of type any 

--== creating custom valiators:easier to do on reactive form
will restrict some words to be addesd: 
    private restrictedWords(control: FormControl): {[key: string]: any} {
this returns javascript object; either an error if restricted word is there or null.
        this.abstract = new FormControl('', [Validators.required, Validators.maxLength(400), this.restrictedWords]);
 and just add it there. check how error was wired in teh moduel: abstract?.errors.restrictedWords in html: the restircedWords matches the key we return in hte function
 hten we updated the validator that was a function: we wanted to pass array of words: so we make that inital validator a jsFunction that will return a fat arrow function
 at las we made it a reusable valiator( note: might need reshaping how it chekcs for words, overlall it works hjust fine)



            --===communication between components ========---


--== passing data into child component
can dispaly a component using its selector, but how do we pass data to that child component. refer back to event details component and session-list
    <session-list [sessions]="event?.sessions"></session-list>      : in parent html
    and willhave sessions property in the child component
    "event?.sessions":: is available in the parent componet and htmkl



--== passing data out of a child component
basically done in respect to some event usually, can be done using the @output
 he linked create session to teh eventdetail    : interesting how we hide a component to show another 
 when we add session we want it to be saved to the main parent event. gotcha
 used an event emitter in teh child component to emit that newly created session
 in eventdetailhtml we bind to the 'saveNewSession' event fired from createSessionComponent. and when thats fired we're going to call saveNewSession in EventDetailsComponent and pass in the event that is emitted: which adds that session to 
 the event and updates that event



        --== Reusing Components with Content Projection ==--
        Content Projection: ability to change content of a component based on the needs of application. I think thsi is called transeclusion in anglular 1
        so like have a dialog box wrapped in a ciontianer that can be reused and save us another implementaion 

-== Content Projeciton
lets collapse the sessions and only show title, once clicked on it can expand to normal size
      <collapsible-well [title]="session.name">: added in the sessionlist html
 binding to that session.name
 notice how he used the <ng-content> in the collapsible-well html : so whatever content was in our session componet html if you go back to it, I wnat it refered in my collapsible

 --== multiple slot projection
 what if I want to add votes or something thatll be specific for each session, more logic contatined in the binding now
 notice how bindign have chagned
 and how the title and body tags(changed later to div with those respected class? changed later to attribute) had to be specified to angular: how which piece of html from sessionlist to show where in the collapsiblewell ng-content
        ==> this can be done using optional select attribute:         <ng-content select=".title"></ng-content> thats when usign class="title" in sessionlist
        when changed to attribute: became like this :   <div well-title> in session and         <ng-content select="[well-title]"></ng-content> in the collapsiblewell
latter is better usign the att selector vs the normal class cause it might conflict with you r actuall css classes, and makes the div for recongnixible



            --=== Displaying data with data
 in angular 2 there was some issues in sorting and filtering. formatting still exists from Angular 1 but the rest was modified
--== build in pipes:
one example was to pipe all titles to be upper case:             <h2>{{event?.name | uppercase}}</h2>
for date =  {{event?.date | date:'shortDate'}} also check how parameters for teh date was passed
also notice how we piped the currency kind : \${{event.price}} to {{event.price | currecny:'USD'}} wehre USD can be binded from component if needed in teh future

--== Creating a custom pipe
wanted a duration pipe for each event duration
look into duration.pipe.ts: use pipe decorator that takes in name of the pipe
 @Pipe({
    name: 'duration'
})
then implementing transform function that takes input value and outputs whatever desired thing you want
have to make angular 2 aware of the new pipe : has to be added to the declaaration section sir



--=== Sorting and filtering overview
=>Primtive Identity: primitive varialbles saved in a specific memory location saving variable and value to gether in small slot and its easy to compare them and stuff
=>Object Identity: objects stored different, the variable points to a certain memory location, and JS comparison would give you false on these guys. so if I had 'a' and 'b' initially 
then i set 'c' to 'a' (c=a) now 'c' is actually poiting to object 'a' as well, it didnt crate a new object. comparing a and c would return true as tehy pointng to same object.
i can change 'a' and not c but the compariso is true. however is i say a={} that is new object then a and c comparison would fail 
=> Mutability: stuff would change. so given an array of items, we edit it then compiler needs to render and update your view: how does it detect the change.
if it was primitive types thatll be weasy operation, but for objects it is stuff especiialy how they track memory. if you want to go through each item in list that will be a costly 
operation hmm?
Another option is 'Impure Pipes' that run on EVERY change detection cycle, but this would run with every event run/fired in your application. so if you move mouse then you are going 
to detect data change and resort if you want ?? so this some of the performanace problems in angular 1.
Pipes are no longer recommended to filter and sort in Angular 2, instaed do it your self, and make it more efficient and customizable; so how do we do it correctly 

--== Creating a filtering display
wanna filter the ssessions: they have different levels
this was done in teh even-details component
jsut adding some random buttons here and there: UI stuff

==-- Filtering Data
the filtering algorithm will be put in our session-list component: 
notice how we passed that filtering variable to our child component: and how used the OnChagnes interface, with ngOnChanges method thatll be called whenever your input has changed:
take care of your null gaurds and checking if avalues actully exist berfore filtering
notice how we didnt modify the intial input sessions but had a temp visisblesessions
::             this.visibleSessions = this.sessions.slice(0); notice how we cloned the thing
:: = this.sessions.filter(session => {
                return session.level.toLocaleLowerCase() === filter <-- one of the filtering options it only returns what matched that level


its neat how where we added the logic to filter the sessions: was it the parent or child component

==-- Sorting
lets sort by name or votes
same flow as the filtering
there is a built in function on arrays that will help you sort: pass to it an inline function or normal function to do your sorting as you wish
look how the sorting function on array  works and how we implemented the functions we passed to it